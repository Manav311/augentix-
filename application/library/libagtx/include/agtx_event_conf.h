/******************************************************************************
*
* opyright (c) Augentix Inc. - All Rights Reserved
*
* Unauthorized copying of this file, via any medium is strictly prohibited.
*
* Proprietary and confidential.
*
******************************************************************************/


#ifndef AGTX_EVENT_CONF_H_
#define AGTX_EVENT_CONF_H_


#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#include "agtx_types.h"
#include "agtx_common.h"
struct json_object;

typedef enum {
	AGTX_SW_EVENT_SOCKET_PATH_NONE,
	AGTX_SW_EVENT_SOCKET_PATH_IVA_MD,
	AGTX_SW_EVENT_SOCKET_PATH_IVA_TD,
	AGTX_SW_EVENT_SOCKET_PATH_NUM
} AGTX_SW_EVENT_SOCKET_PATH_E;

typedef enum {
	AGTX_SW_EVENT_TRIG_TYPE_NONE,
	AGTX_SW_EVENT_TRIG_TYPE_IVA_MD_NEGATIVE,
	AGTX_SW_EVENT_TRIG_TYPE_IVA_MD_POSITIVE,
	AGTX_SW_EVENT_TRIG_TYPE_IVA_TD_NEGATIVE,
	AGTX_SW_EVENT_TRIG_TYPE_IVA_TD_POSITIVE,
	AGTX_SW_EVENT_TRIG_TYPE_NUM
} AGTX_SW_EVENT_TRIG_TYPE_E;

#define MAX_AGTX_SW_EVENT_S_ACTION_ARGS_SIZE 129
#define MAX_AGTX_SW_EVENT_LIST_S_EVENT_SIZE 2
typedef enum {
	AGTX_EVENT_SOURCE_GPIO,
	AGTX_EVENT_SOURCE_SW,
	AGTX_EVENT_SOURCE_EINTC,
	AGTX_EVENT_SOURCE_ADC,
	AGTX_EVENT_SOURCE_LED,
	AGTX_EVENT_SOURCE_MPI,
	AGTX_EVENT_SOURCE_NUM
} AGTX_EVENT_SOURCE_E;

typedef enum {
	AGTX_EVENT_NAME_NONE,
	AGTX_EVENT_NAME_PUSH_BUTTON_IN,
	AGTX_EVENT_NAME_LIGHT_SENSOR_IN,
	AGTX_EVENT_NAME_PIR_IN,
	AGTX_EVENT_NAME_SD_CARD_IN,
	AGTX_EVENT_NAME_EINTC_PIR,
	AGTX_EVENT_NAME_IVA_MD,
	AGTX_EVENT_NAME_IVA_TD,
	AGTX_EVENT_NAME_LIGHT_SENSOR_ADC,
	AGTX_EVENT_NAME_LED_INFORM,
	AGTX_EVENT_NAME_LIGHT_SENSOR_MPI,
	AGTX_EVENT_NAME_NUM
} AGTX_EVENT_NAME_E;

#define MAX_AGTX_LED_INIT_RULE_S_ACTION_ARGS_SIZE 129
typedef enum {
	AGTX_LED_EVENT_TRIG_TYPE_NONE,
	AGTX_LED_EVENT_TRIG_TYPE_Wifi_Pairing,
	AGTX_LED_EVENT_TRIG_TYPE_Wifi_Connecting,
	AGTX_LED_EVENT_TRIG_TYPE_Cloud_Connecting,
	AGTX_LED_EVENT_TRIG_TYPE_Connecting_Fail,
	AGTX_LED_EVENT_TRIG_TYPE_Wifi_Connected,
	AGTX_LED_EVENT_TRIG_TYPE_Motion_Detected,
	AGTX_LED_EVENT_TRIG_TYPE_Live_view,
	AGTX_LED_EVENT_TRIG_TYPE_Low_Signal,
	AGTX_LED_EVENT_TRIG_TYPE_Disconnected,
	AGTX_LED_EVENT_TRIG_TYPE_OTA,
	AGTX_LED_EVENT_TRIG_TYPE_Critical_Error,
	AGTX_LED_EVENT_TRIG_TYPE_Card_Upgrade,
	AGTX_LED_EVENT_TRIG_TYPE_DEBUG_MODE,
	AGTX_LED_EVENT_TRIG_TYPE_DEBUG_INFO_DUMP,
	AGTX_LED_EVENT_TRIG_TYPE_Reset_INFO_Slow,
	AGTX_LED_EVENT_TRIG_TYPE_Reset_INFO_Fast,
	AGTX_LED_EVENT_TRIG_TYPE_LED_OFF,
	AGTX_LED_EVENT_TRIG_TYPE_NUM
} AGTX_LED_EVENT_TRIG_TYPE_E;

#define MAX_AGTX_LED_EVENT_S_ACTION_ARGS_SIZE 129
#define MAX_AGTX_LED_EVENT_LIST_S_EVENT_SIZE 17
#define MAX_AGTX_GPIO_INIT_RULE_S_ACTION_ARGS_SIZE 129
typedef enum {
	AGTX_GPIO_EVENT_TRIG_TYPE_NONE,
	AGTX_GPIO_EVENT_TRIG_TYPE_LEVEL,
	AGTX_GPIO_EVENT_TRIG_TYPE_EDGE,
	AGTX_GPIO_EVENT_TRIG_TYPE_NUM
} AGTX_GPIO_EVENT_TRIG_TYPE_E;

#define MAX_AGTX_GPIO_EVENT_S_ACTION_ARGS_SIZE 129
#define MAX_AGTX_GPIO_EVENT_LIST_S_EVENT_SIZE 3
#define MAX_AGTX_GPIO_EVENT_LIST_S_INIT_LEVEL_SIZE 2
typedef enum {
	AGTX_EINTC_EVENT_DEVICE_PATH_NONE,
	AGTX_EINTC_EVENT_DEVICE_PATH_EINTC_PIR,
	AGTX_EINTC_EVENT_DEVICE_PATH_NUM
} AGTX_EINTC_EVENT_DEVICE_PATH_E;

typedef enum {
	AGTX_EINTC_EVENT_TRIG_TYPE_NONE,
	AGTX_EINTC_EVENT_TRIG_TYPE_EINTC_PIR_NEGATIVE,
	AGTX_EINTC_EVENT_TRIG_TYPE_EINTC_PIR_POSITIVE,
	AGTX_EINTC_EVENT_TRIG_TYPE_NUM
} AGTX_EINTC_EVENT_TRIG_TYPE_E;

#define MAX_AGTX_EINTC_EVENT_S_ACTION_ARGS_SIZE 129
#define MAX_AGTX_EINTC_EVENT_LIST_S_EVENT_SIZE 2
#define MAX_AGTX_ADC_INIT_RULE_S_ACTION_ARGS_SIZE 129
typedef enum {
	AGTX_ADC_EVENT_TRIG_TYPE_NONE,
	AGTX_ADC_EVENT_TRIG_TYPE_HYS,
	AGTX_ADC_EVENT_TRIG_TYPE_NUM
} AGTX_ADC_EVENT_TRIG_TYPE_E;

typedef enum {
	AGTX_EVENT_ACTION_CB_NONE,
	AGTX_EVENT_ACTION_CB_PRINT,
	AGTX_EVENT_ACTION_CB_EXEC_CMD,
	AGTX_EVENT_ACTION_CB_PARSE_STRING,
	AGTX_EVENT_ACTION_CB_NUM
} AGTX_EVENT_ACTION_CB_E;

#define MAX_AGTX_ADC_EVENT_S_ACTION_ARGS_SIZE 129
#define MAX_AGTX_ADC_EVENT_LIST_S_EVENT_SIZE 2
#define MAX_AGTX_ADC_EVENT_LIST_S_INIT_HYS_SIZE 2
#define MAX_AGTX_EVENT_CONF_S_EVENT_SIZE 10

typedef struct {
	AGTX_SW_EVENT_TRIG_TYPE_E trigger_type;
} AGTX_SW_EVENT_RULE_S;

typedef struct {
	AGTX_EVENT_ACTION_CB_E action;
	AGTX_UINT8 action_args[MAX_AGTX_SW_EVENT_S_ACTION_ARGS_SIZE];
	AGTX_SW_EVENT_RULE_S rule;
} AGTX_SW_EVENT_S;

typedef struct {
	AGTX_SW_EVENT_S event[MAX_AGTX_SW_EVENT_LIST_S_EVENT_SIZE];
	AGTX_SW_EVENT_SOCKET_PATH_E socket_path; /* Name of the software socket path. */
} AGTX_SW_EVENT_LIST_S;

#define MAX_AGTX_MPI_EVENT_S_ACTION_ARGS_SIZE 129
#define MAX_AGTX_MPI_EVENT_LIST_S_EVENT_SIZE 2

typedef struct {
	AGTX_EVENT_ACTION_CB_E action;
	AGTX_UINT8 action_args[MAX_AGTX_MPI_EVENT_S_ACTION_ARGS_SIZE];
} AGTX_MPI_EVENT_S;

typedef struct {
	AGTX_MPI_EVENT_S event[MAX_AGTX_MPI_EVENT_LIST_S_EVENT_SIZE];
} AGTX_MPI_EVENT_LIST_S;

typedef struct {
	AGTX_UINT8 action_args[MAX_AGTX_GPIO_INIT_RULE_S_ACTION_ARGS_SIZE];
} AGTX_GPIO_INIT_RULE_S;

typedef struct {
	AGTX_INT32 edge; /* -1: Trigger on falling edge, +1: Trigger on rising edge. */
	AGTX_INT32 edge_time_sec_end;
	AGTX_INT32 edge_time_sec_start;
	AGTX_INT32 level_time_sec;
	AGTX_INT32 level_value;
	AGTX_GPIO_EVENT_TRIG_TYPE_E trigger_type;
} AGTX_GPIO_EVENT_RULE_S;

typedef struct {
	AGTX_EVENT_ACTION_CB_E action;
	AGTX_UINT8 action_args[MAX_AGTX_GPIO_EVENT_S_ACTION_ARGS_SIZE];
	AGTX_GPIO_EVENT_RULE_S rule;
} AGTX_GPIO_EVENT_S;

typedef struct {
	AGTX_GPIO_EVENT_S event[MAX_AGTX_GPIO_EVENT_LIST_S_EVENT_SIZE];
	AGTX_GPIO_INIT_RULE_S init_level[MAX_AGTX_GPIO_EVENT_LIST_S_INIT_LEVEL_SIZE];
	AGTX_INT32 polling_period_usec;
} AGTX_GPIO_EVENT_LIST_S;

typedef struct {
	AGTX_EINTC_EVENT_TRIG_TYPE_E trigger_type;
} AGTX_EINTC_EVENT_RULE_S;

typedef struct {
	AGTX_EVENT_ACTION_CB_E action;
	AGTX_UINT8 action_args[MAX_AGTX_EINTC_EVENT_S_ACTION_ARGS_SIZE];
	AGTX_EINTC_EVENT_RULE_S rule;
} AGTX_EINTC_EVENT_S;

typedef struct {
	AGTX_EINTC_EVENT_DEVICE_PATH_E device_path; /* Name of the external interrupt device path. */
	AGTX_EINTC_EVENT_S event[MAX_AGTX_EINTC_EVENT_LIST_S_EVENT_SIZE];
	AGTX_INT32 jiffies_timeout;
	AGTX_INT32 sensitivity;
} AGTX_EINTC_EVENT_LIST_S;

typedef struct {
	AGTX_UINT8 action_args[MAX_AGTX_ADC_INIT_RULE_S_ACTION_ARGS_SIZE];
} AGTX_ADC_INIT_RULE_S;

typedef struct {
	AGTX_INT32 hys_th;
	AGTX_ADC_EVENT_TRIG_TYPE_E trigger_type;
} AGTX_ADC_EVENT_RULE_S;

typedef struct {
	AGTX_EVENT_ACTION_CB_E action;
	AGTX_UINT8 action_args[MAX_AGTX_ADC_EVENT_S_ACTION_ARGS_SIZE];
	AGTX_ADC_EVENT_RULE_S rule;
} AGTX_ADC_EVENT_S;

typedef struct {
	AGTX_INT32 chn;
	AGTX_ADC_EVENT_S event[MAX_AGTX_ADC_EVENT_LIST_S_EVENT_SIZE];
	AGTX_ADC_INIT_RULE_S init_hys[MAX_AGTX_ADC_EVENT_LIST_S_INIT_HYS_SIZE]; /* init_hys[0]: action that hys_th is less hys_th0, init_hys[1]: action that hys_th is larder than hys_th0. */
	AGTX_INT32 polling_period_usec;
} AGTX_ADC_EVENT_LIST_S;

typedef struct {
	AGTX_LED_EVENT_TRIG_TYPE_E trigger_type;
} AGTX_LED_EVENT_RULE_S;

typedef struct {
	AGTX_EVENT_ACTION_CB_E action;
	AGTX_UINT8 action_args[MAX_AGTX_LED_EVENT_S_ACTION_ARGS_SIZE];
	AGTX_INT32 in_use; /* Enable the led client when set to true. */
	AGTX_LED_EVENT_RULE_S rule;
} AGTX_LED_EVENT_S;

typedef struct {
	AGTX_LED_EVENT_S event[MAX_AGTX_LED_EVENT_LIST_S_EVENT_SIZE];
	AGTX_INT32 fast_flash_period_usec;
	AGTX_INT32 init_light_on_pin_num;
	AGTX_INT32 init_light_on_value;
	AGTX_INT32 polling_period_usec;
	AGTX_INT32 slow_flash_period_usec;
	AGTX_INT32 trigger_type_level;
} AGTX_LED_EVENT_LIST_S;

typedef struct {
	AGTX_ADC_EVENT_LIST_S adc;
	AGTX_INT32 always_enabled; /* Force to enable this event. */
	AGTX_EINTC_EVENT_LIST_S eintc;
	AGTX_GPIO_EVENT_LIST_S gpio;
	AGTX_INT32 in_use; /* Create a thread when set to true. */
	AGTX_LED_EVENT_LIST_S led;
	AGTX_MPI_EVENT_LIST_S mpi;
	AGTX_EVENT_NAME_E name; /* Name of the event group. */
	AGTX_EVENT_SOURCE_E source;
	AGTX_SW_EVENT_LIST_S sw;
} AGTX_EVENT_GROUP_S;

typedef struct {
	AGTX_EVENT_GROUP_S event[MAX_AGTX_EVENT_CONF_S_EVENT_SIZE];
} AGTX_EVENT_CONF_S;


#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* !AGTX_EVENT_CONF_H_ */
