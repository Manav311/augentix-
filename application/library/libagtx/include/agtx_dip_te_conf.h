#ifndef AGTX_DIP_TE_CONF_H_
#define AGTX_DIP_TE_CONF_H_

#include "agtx_types.h"
struct json_object;

#define MAX_AGTX_DIP_TE_WDR_S_NOISE_CSTR_SIZE 11
typedef enum { AGTX_TE_DRI_TYPE_GAMMA_DOMAIN_HIST_CV, AGTX_TE_DRI_TYPE_LINEAR_DOMAIN_HIST_CV } AGTX_TE_DRI_TYPE_E;

#define MAX_AGTX_DIP_TE_WDR_AUTO_S_BRIGHTNESS_SIZE 9
#define MAX_AGTX_DIP_TE_WDR_AUTO_S_DARK_ENHANCE_SIZE 9
#define MAX_AGTX_DIP_TE_WDR_AUTO_S_DRI_GAIN_SIZE 11
#define MAX_AGTX_DIP_TE_WDR_AUTO_S_DRI_OFFSET_SIZE 11
#define MAX_AGTX_DIP_TE_WDR_AUTO_S_NOISE_CSTR_SIZE 11
#define MAX_AGTX_DIP_TE_WDR_AUTO_S_SALIENCY_SIZE 9
#define MAX_AGTX_DIP_TE_WDR_AUTO_S_STRENGTH_SIZE 9
typedef enum { AGTX_TE_MODE_NORMAL, AGTX_TE_MODE_WDR, AGTX_TE_MODE_WDR_AUTO, AGTX_TE_MODE_ADAPTIVE } AGTX_TE_MODE_E;

typedef enum {
	AGTX_TE_BASED_TYPE_TE_ADAPT_NL_BASED,
	AGTX_TE_BASED_TYPE_TE_ADAPT_INTTIME_BASED,
	AGTX_TE_BASED_TYPE_TE_ADAPT_EV_BASED,
	AGTX_TE_BASED_TYPE_TE_ADAPT_BASED_TYPE_RSV
} AGTX_TE_BASED_TYPE_E;

#define MAX_AGTX_DIP_TE_ADAPT_S_BLACK_TH_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_DARK_ENHANCE_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_DARK_ENHANCE_TH_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_DARK_PROTECT_SMOOTH_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_DARK_PROTECT_STR_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_MAX_STR_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_STR_AUTO_SIZE 11
#define MAX_AGTX_DIP_TE_ADAPT_S_WHITE_TH_SIZE 11
#define MAX_AGTX_DIP_TE_CONF_S_NORMAL_CTL_SIZE 60

typedef struct {
	AGTX_INT32 brightness;
	AGTX_INT32 dark_enhance;
	AGTX_INT32 interval;
	AGTX_INT32 iso_max;
	AGTX_INT32 iso_weight;
	AGTX_INT32 noise_cstr[MAX_AGTX_DIP_TE_WDR_S_NOISE_CSTR_SIZE];
	AGTX_INT32 precision;
	AGTX_INT32 saliency;
	AGTX_INT32 strength;
} AGTX_DIP_TE_WDR_S;

typedef struct {
	AGTX_INT32 brightness[MAX_AGTX_DIP_TE_WDR_AUTO_S_BRIGHTNESS_SIZE];
	AGTX_INT32 dark_enhance[MAX_AGTX_DIP_TE_WDR_AUTO_S_DARK_ENHANCE_SIZE];
	AGTX_INT32 dri_gain[MAX_AGTX_DIP_TE_WDR_AUTO_S_DRI_GAIN_SIZE];
	AGTX_INT32 dri_offset[MAX_AGTX_DIP_TE_WDR_AUTO_S_DRI_OFFSET_SIZE];
	AGTX_TE_DRI_TYPE_E dri_type;
	AGTX_INT32 interval;
	AGTX_INT32 iso_max;
	AGTX_INT32 iso_weight;
	AGTX_INT32 noise_cstr[MAX_AGTX_DIP_TE_WDR_AUTO_S_NOISE_CSTR_SIZE];
	AGTX_INT32 precision;
	AGTX_INT32 saliency[MAX_AGTX_DIP_TE_WDR_AUTO_S_SALIENCY_SIZE];
	AGTX_INT32 strength[MAX_AGTX_DIP_TE_WDR_AUTO_S_STRENGTH_SIZE];
} AGTX_DIP_TE_WDR_AUTO_S;

typedef struct {
	AGTX_INT32 black_th[MAX_AGTX_DIP_TE_ADAPT_S_BLACK_TH_SIZE];
	AGTX_INT32 dark_enhance[MAX_AGTX_DIP_TE_ADAPT_S_DARK_ENHANCE_SIZE];
	AGTX_INT32 dark_enhance_th[MAX_AGTX_DIP_TE_ADAPT_S_DARK_ENHANCE_TH_SIZE];
	AGTX_INT32 dark_protect_smooth[MAX_AGTX_DIP_TE_ADAPT_S_DARK_PROTECT_SMOOTH_SIZE];
	AGTX_INT32 dark_protect_str[MAX_AGTX_DIP_TE_ADAPT_S_DARK_PROTECT_STR_SIZE];
	AGTX_INT32 max_str[MAX_AGTX_DIP_TE_ADAPT_S_MAX_STR_SIZE];
	AGTX_INT32 max_str_prec_sel;
	AGTX_INT32 speed;
	AGTX_INT32 str_auto[MAX_AGTX_DIP_TE_ADAPT_S_STR_AUTO_SIZE];
	AGTX_INT32 str_auto_en;
	AGTX_INT32 strength;
	AGTX_TE_BASED_TYPE_E te_adapt_based_type;
	AGTX_INT32 white_th[MAX_AGTX_DIP_TE_ADAPT_S_WHITE_TH_SIZE];
} AGTX_DIP_TE_ADAPT_S;

typedef struct {
	AGTX_DIP_TE_ADAPT_S adapt_ctl;
	AGTX_TE_MODE_E mode;
	AGTX_INT32 normal_ctl[MAX_AGTX_DIP_TE_CONF_S_NORMAL_CTL_SIZE];
	AGTX_INT32 video_dev_idx;
	AGTX_DIP_TE_WDR_AUTO_S wdr_auto_ctl;
	AGTX_DIP_TE_WDR_S wdr_ctl;
} AGTX_DIP_TE_CONF_S;

#endif /* AGTX_DIP_TE_CONF_H_ */
